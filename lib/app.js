// Generated by CoffeeScript 1.6.3
/*
#   Module dependencies.
*/

var async, cnumber, color, colors, moment, program, render, stream, titles, updated, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

program = require("commander");

_ = require('underscore');

async = require('async');

moment = require('moment');

colors = require('colors');

/*
#  Module Configration
*/


colors.setTheme({
  time: 'grey',
  verbose: 'cyan',
  prompt: 'grey',
  info: 'blue'
});

color = ["white", 'yellow', 'cyan', 'magenta', 'red', 'green', 'blue'];

cnumber = 0;

/*
# Main Script
*/


program.version("0.2.0").option("-s, --stream [value]", "select Streamname(e.g.'nikezono')").parse(process.argv);

updated = (new Date()).getTime() - 1000 * 60 * 60;

stream = program.stream;

titles = [];

process.nextTick(function() {
  var client, socket;
  if (!stream) {
    return console.log("Please input stream name.exit...");
  }
  /* socket.io Configration*/

  client = require('socket.io-client');
  socket = client.connect("http://unific.net");
  return socket.on('connect', function() {
    console.log("Add Stream '" + stream.blue + "'. Please Wait for Sync");
    socket.emit('sync stream', {
      stream: stream,
      latest: updated
    });
    socket.on('sync completed', function(pages) {
      var sorted, uniqued;
      if (pages.length > 0) {
        uniqued = _.filter(pages, function(article) {
          var _ref;
          if (_ref = article.page.title, __indexOf.call(titles, _ref) >= 0) {
            return false;
          } else {
            return true;
          }
        });
        if (_.isEmpty(uniqued)) {
          return;
        }
        sorted = _.sortBy(uniqued, function(article) {
          return Date.parse(article.page.pubDate);
        });
        updated = Date.parse(_.last(sorted).page.pubDate);
        _.map(sorted, function(article) {
          return titles.push(article.page.title);
        });
        return render(sorted);
      }
    });
    return setInterval(function() {
      return socket.emit('sync stream', {
        stream: stream,
        latest: updated
      });
    }, 1000 * 60);
  });
});

render = function(sorted) {
  return async.eachSeries(sorted, function(article, cb) {
    var date, seed, site, title, url;
    seed = parseInt(article.feed._id) + article.feed.title.length;
    cnumber = seed % color.length;
    date = ("[" + (moment(article.page.pubDate).format("(ddd) HH:mm")) + "]").time;
    title = article.page.title[color[cnumber]];
    site = article.feed.title;
    url = article.page.url.underline;
    return setTimeout(function() {
      console.log("" + date + " " + title + " - " + site + ":" + url);
      return cb();
    }, 100);
  }, function() {});
};
